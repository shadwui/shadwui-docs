{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "sign-in-route-options-mongodb",
  "type": "registry:file",
  "title": "Sign In Route options",
  "files": [
    {
      "path": "registry/src/auth/code/mongodb/routes/options.ts",
      "content": "import CredentialsProvider from \"next-auth/providers/credentials\";\r\nimport GoogleProvider from \"next-auth/providers/google\";\r\nimport { NextAuthOptions } from \"next-auth\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport UserModel from \"@/model/user\";\r\nimport dbConnect from \"@/registry/src/auth/code/mongodb/lib/db-connect\";\r\n\r\nexport const authOptions: NextAuthOptions = {\r\n  providers: [\r\n    CredentialsProvider({\r\n      id: \"credentials\",\r\n      name: \"credentials\",\r\n      credentials: {\r\n        username: { label: \"Username\", type: \"text\" },\r\n        email: { label: \"Email\", type: \"email\" },\r\n        password: { label: \"Password\", type: \"password\" },\r\n      },\r\n      async authorize(credentials: any): Promise<any> {\r\n        await dbConnect();\r\n        try {\r\n          const user = await UserModel.findOne({\r\n            $or: [\r\n              { email: credentials.identifier },\r\n              { username: credentials.identifier },\r\n            ],\r\n          });\r\n\r\n          if (!user) {\r\n            throw new Error(\"No user found with this email/username\");\r\n          }\r\n\r\n          if (!user.password) {\r\n            throw new Error(\"Please sign in with your social account\");\r\n          }\r\n\r\n          const isPasswordCorrect = await bcrypt.compare(\r\n            credentials.password,\r\n            user.password\r\n          );\r\n\r\n          if (isPasswordCorrect) {\r\n            return user;\r\n          } else {\r\n            throw new Error(\"Incorrect password\");\r\n          }\r\n        } catch (error) {\r\n          throw new Error(`Error while login with credentials ${error}`);\r\n        }\r\n      },\r\n    }),\r\n    GoogleProvider({\r\n      clientId: process.env.GOOGLE_CLIENT_ID!,\r\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\r\n    }),\r\n  ],\r\n  callbacks: {\r\n    async signIn({ user, account, profile }) {\r\n      if (account?.provider === \"google\") {\r\n        await dbConnect();\r\n        try {\r\n          const existingUser = await UserModel.findOne({\r\n            email: profile?.email,\r\n          });\r\n\r\n          if (!existingUser) {\r\n            // Generate username from Google profile\r\n            let username = profile?.name?.replace(/\\s+/g, \"\").toLowerCase();\r\n\r\n            // If no name in profile, use email local part\r\n            if (!username) {\r\n              username = profile?.email?.split(\"@\")[0];\r\n            }\r\n\r\n            // Check for existing username\r\n            let usernameExists = await UserModel.findOne({ username });\r\n            while (usernameExists) {\r\n              username = `${username}${Math.floor(Math.random() * 1000)}`;\r\n              usernameExists = await UserModel.findOne({ username });\r\n            }\r\n\r\n            const newUser = new UserModel({\r\n              email: profile?.email,\r\n              username,\r\n              role: \"user\",\r\n              // Add any other required fields from your UserModel\r\n            });\r\n\r\n            await newUser.save();\r\n            user._id = newUser._id.toString();\r\n            user.username = newUser.username;\r\n            user.role = newUser.role;\r\n          } else {\r\n            // Update user object with existing data\r\n            user._id = existingUser._id.toString();\r\n            user.username = existingUser.username;\r\n            user.role = existingUser.role;\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Google sign-in error:\", error);\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    },\r\n    async jwt({ token, user }) {\r\n      if (user) {\r\n        token._id = user._id?.toString();\r\n        token.username = user.username;\r\n        token.role = user.role;\r\n      }\r\n      return token;\r\n    },\r\n    async session({ session, token }) {\r\n      if (token) {\r\n        session.user._id = token._id;\r\n        session.user.username = token.username;\r\n        session.user.role = token.role;\r\n      }\r\n      return session;\r\n    },\r\n  },\r\n  pages: {\r\n    signIn: \"/sign-in\",\r\n  },\r\n  session: {\r\n    strategy: \"jwt\",\r\n  },\r\n  secret: process.env.NEXTAUTH_SECRET,\r\n};\r\n",
      "type": "registry:file",
      "target": "app/api/auth/[...nextauth]/options.ts"
    }
  ]
}